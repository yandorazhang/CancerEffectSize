# print(c(fdp(selected), po(selected)))
betab = cbind(betab, fit$beta)
}
cvob1 = cv.glmnet(x,y,alpha=1)
fit = glmnet(x, y, family="gaussian",alpha=1, lambda=lam)
selected = which(fit$beta!=0)
print(c(fdp(selected), po(selected)))
mb = apply(betab,1, mean)
seb = apply(betab,1,sd)
tb = mb/seb
selected = which(abs(tb)>1.96)
print(c(fdp(selected), po(selected)))
cvob1 = cv.glmnet(x,y,alpha=1)
fit = glmnet(x, y, family="gaussian",alpha=1, lambda=lam)
selected = which(fit$beta!=0)
print(c(fdp(selected), po(selected)))
dim(bbeta)
dim(betab)
mb = apply(betab,1, mean)
seb = apply(betab,1,sd)
tb = mb/seb
selected = which(abs(tb)>1.96)
print(c(fdp(selected), po(selected)))
set.seed(1234)
# Problem parameters
n = 100          # number of observations
p = 200         # number of variables
k = 20          # number of variables with nonzero coefficients
amplitude = 4.5   # signal amplitude (for noise level = 1)
# Generate the variables from a multivariate normal distribution
mu = rep(0,p)
rho = 0.5
Sigma = toeplitz(rho^(0:(p-1)))
x = matrix(rnorm(n*p),n) %*% chol(Sigma)
x = scale(x)
# Generate the response from a linear model
nonzero = sample(p, k)
beta0 = amplitude * (1:p %in% nonzero) / sqrt(n)
y.sample = function(x) x %*% beta0 + rnorm(n)
y = y.sample(x)
y = scale(y)
# y = scale(rnorm(length(y)))
fdp = function(selected) sum(beta0[selected] == 0) / max(1, length(selected))
po = function(selected) sum(beta0[selected] != 0) / max(1, sum(beta0 != 0))
library(knockoff)
#1. ------- x.knockoff
gaussian_knockoffs = function(x) create.gaussian(x, mu, Sigma)
fdr=NULL
pow = NULL
mW = NULL
for(i in 1:1){
result = knockoff.filter(x, y, fdr=.2)
# print(result)
fdr = c(fdr, fdp(result$selected))
pow = c(pow, po(result$selected))
W = result$statistic;
mW = c(mW, median(W[which(beta0==0)]))
}
mean(fdr)
mean(pow)
mW
#2.---------- xy------------------------------
betab = NULL
B = 100
for(b in 1:B){
xy = cbind(x,y)
M = 1000
yk = matrix(rnorm(M*n),n,M)
yks = scale(yk)
xk = 1/sqrt(n-1)*t(yks) %*% xy
xk = scale(xk)
# s_xy = cov(xk)
# fit = lm(xk[,(p+1)]~xk[,-(p+1)])
ynew = xk[,p+1]
xnew = xk[,1:p]
cvob1 = cv.glmnet(xnew,ynew,alpha=1)
lam = cvob1$lambda.1se
# lam = 0.09115169
fit = glmnet(xnew,ynew, family="gaussian",alpha=1, lambda=lam)
selected = which(fit$beta!=0)
# print(c(fdp(selected), po(selected)))
betab = cbind(betab, fit$beta)
}
cvob1 = cv.glmnet(x,y,alpha=1)
fit = glmnet(x, y, family="gaussian",alpha=1, lambda=lam)
selected = which(fit$beta!=0)
print(c(fdp(selected), po(selected)))
mb = apply(betab,1, mean)
seb = apply(betab,1,sd)
tb = mb/seb
selected = which(abs(tb)>1.96)
print(c(fdp(selected), po(selected)))
summary(betab)
mb
summary(mb)
selected
print(c(fdp(selected), po(selected)))
print(c(fdp(selected), po(selected)))
cvob1 = cv.glmnet(x,y,alpha=1)
fit = glmnet(x, y, family="gaussian",alpha=1, lambda=lam)
selected = which(fit$beta!=0)
print(c(fdp(selected), po(selected)))
#2.---------- xy------------------------------
betab = NULL
B = 1000
for(b in 1:B){
xy = cbind(x,y)
M = 1000
yk = matrix(rnorm(M*n),n,M)
yks = scale(yk)
xk = 1/sqrt(n-1)*t(yks) %*% xy
xk = scale(xk)
# s_xy = cov(xk)
# fit = lm(xk[,(p+1)]~xk[,-(p+1)])
ynew = xk[,p+1]
xnew = xk[,1:p]
cvob1 = cv.glmnet(xnew,ynew,alpha=1)
lam = cvob1$lambda.1se
# lam = 0.09115169
fit = glmnet(xnew,ynew, family="gaussian",alpha=1, lambda=lam)
selected = which(fit$beta!=0)
# print(c(fdp(selected), po(selected)))
betab = cbind(betab, fit$beta)
}
cvob1 = cv.glmnet(x,y,alpha=1)
fit = glmnet(x, y, family="gaussian",alpha=1, lambda=lam)
selected = which(fit$beta!=0)
print(c(fdp(selected), po(selected)))
mb = apply(betab,1, mean)
seb = apply(betab,1,sd)
tb = mb/seb
selected = which(abs(tb)>1.96)
print(c(fdp(selected), po(selected)))
modified_LDscore(const vec &maf, const vec &Nstar, const List &pairwiseLD,
const List &TaggingLoc)
main
main()
load("/Users/dorazhang/OneDrive - The University Of Hong Kong/201911chatterjee_omini/output_real2020Jun/bcac_onco_icogs_gwas/result_H3.RData")
result$estimates
traitlist = c(
"bcac_onco_icogs_gwas",  "bcac_icogs2",
"cardio","egg_bl", "egg_bw2", "egg_bw3","egg_hc", "egg_obesity",
"gabriel_asthma", "GIANT_bmi2010","GIANT_height2010",
"GIANT2018_bmi", "GIANT2018_height", "GPC_neuroticisim",
"IGAP_Alzheimer", "menarche", "Okada_ra",
"IIBDGC_cd", "IIBDGC_ibd", "IIBDGC_uc",
"lipids_hdl", "lipids_ldl", "lipids_tc", "lipids_tg",
"pgc_asd2015", "pgc_asd2017", "pgc_bip2012", "pgc_mdd2012", "pgc_mdd2018",
"pgc_scz2012", "pgc_scz2014", "prostate", "SSGAC_chic",
"SSGAC_college2013", "SSGAC_edu2013", "SSGAC_edu2016",  "t2d")
which(traitlist=="GIANT_height2010")
load("/Users/dorazhang/OneDrive - The University Of Hong Kong/dataset/Data_ldscore/1000G_EUR_Phase3_MAF05_hm3only_plink/output_ld/ana_1000G_EUR_Phase3_MAF05_hm3only_cutoff02.RData")
setwd("~/OneDrive - The University Of Hong Kong/AAA/2018_02_cancer/CancerEffectSize/code/d_summary_figure")
rm(list=ls())
# setwd("~/OneDrive - The University Of Hong Kong/AAA/2018_02_cancer/code_new/results_summary_clump//")
setwd("~/OneDrive - The University Of Hong Kong/AAA/2018_02_cancer/CancerEffectSize/code/d_summary_figure")
library(data.table)
library(ggrepel)
library(dplyr)
library(gridExtra)
library(grid)
tr = fread("../../data_samplesize/cancer_sample_size.csv")
inx1 = c(23,15,43,19,39)
tr = fread("../../data_samplesize/cancer_sample_size.csv")
inx1 = c(23,15,43,19,39)
inx2 = c(42,16,26,13,14,27)
inx3 = c(20,40,4)
inx = c(inx1,inx2,inx3)
M = 1070777
traitlist = unlist(tr[inx,1])
traitlistplot = unlist(tr[inx,7])
mixpdf <- function(x,est){
if(length(est)==5){
pic = est[1]
p0 = est[2]
s1 = sqrt(est[3])
s2 = sqrt(est[4])
den <- function(x){return((p0 * dnorm(x/s1)/s1 + (1-p0)*dnorm(x/s2) /s2))}
}
if(length(est)==3){
pic = est[1]
s1 = sqrt(est[2])
den <- function(x){return(dnorm(x/s1)/s1)}
}
return(den(x))
}
inx2com = c(2,4)
x_seq0 = seq(-0.05,0.05,length.out = 1000);
#-------------------------------#-------------------------------#-------------------------------
result = NULL
for(iter in 1:length(inx)){
trait_name = traitlist[iter]; trait_name_plot = traitlistplot[iter]
output_path = paste0("../../genesis_result_new/",trait_name)
if(iter %in% inx2com){
if(!file.exists(paste0(output_path,"/bestfit2_RemoveOutlier.RData"))){
load(paste0(output_path,"/bestfit2.RData"))
print(c(trait_name,"no"))
herit_OutlierIndep = 0;
n_OutlierIndep = 0;
}
if(file.exists(paste0(output_path,"/bestfit2_RemoveOutlier.RData"))){
load(paste0(output_path,"/bestfit2_RemoveOutlier.RData"))
load(paste0("../../data_new/",trait_name,"/herit_OutlierIndep.RData"))
}
est = fit$estimates$`Parameter (pic, sigmasq, a) estimates`
}
if(!iter %in% inx2com){
if(!file.exists(paste0(output_path,"/fit3_RemoveOutlier.RData"))){
load(paste0(output_path,"/fit3.RData"))
print(c(trait_name,"no"))
herit_OutlierIndep = 0;
n_OutlierIndep = 0;
}
if(file.exists(paste0(output_path,"/fit3_RemoveOutlier.RData"))){
load(paste0(output_path,"/fit3_RemoveOutlier.RData"))
load(paste0("../../data_new/",trait_name,"/herit_OutlierIndep.RData"))
}
est = fit$estimates$`Parameter (pic, p1, sigmasq1, sigmasq2, a) estimates`;
}
y_seq = apply(matrix(x_seq0,ncol=1),1,function(t) mixpdf(t,est))
tem = data.frame(cbind(trait_name_plot, y_seq))
result = rbind(result, tem)
}
getwd()
fread("../../data_samplesize/cancer_sample_size.csv")
fread("../../genesis_result_new/bcac_gwas_all/")
iter
trait_name = traitlist[iter]; trait_name_plot = traitlistplot[iter]
output_path = paste0("../../genesis_result_new/",trait_name)
if(iter %in% inx2com){
if(!file.exists(paste0(output_path,"/bestfit2_RemoveOutlier.RData"))){
load(paste0(output_path,"/bestfit2.RData"))
print(c(trait_name,"no"))
herit_OutlierIndep = 0;
n_OutlierIndep = 0;
}
if(file.exists(paste0(output_path,"/bestfit2_RemoveOutlier.RData"))){
load(paste0(output_path,"/bestfit2_RemoveOutlier.RData"))
load(paste0("../../data_new/",trait_name,"/herit_OutlierIndep.RData"))
}
est = fit$estimates$`Parameter (pic, sigmasq, a) estimates`
}
if(!file.exists(paste0(output_path,"/fit3_RemoveOutlier.RData"))){
load(paste0(output_path,"/fit3.RData"))
print(c(trait_name,"no"))
herit_OutlierIndep = 0;
n_OutlierIndep = 0;
}
if(file.exists(paste0(output_path,"/fit3_RemoveOutlier.RData"))){
load(paste0(output_path,"/fit3_RemoveOutlier.RData"))
load(paste0("../../data_new/",trait_name,"/herit_OutlierIndep.RData"))
}
est = fit$estimates$`Parameter (pic, p1, sigmasq1, sigmasq2, a) estimates`;
load(paste0("../../data_new/",trait_name,"/herit_OutlierIndep.RData"))
#-------------------------------------------------------------------
# Update Date: 01/29/2020
# Create Date: 04/29/2019
# Author: Yan (Dora) Zhang
#-------------------------------------------------------------------
rm(list=ls())
# setwd("~/OneDrive - The University Of Hong Kong/AAA/2018_02_cancer/code_new/results_summary_clump//")
setwd("~/OneDrive - The University Of Hong Kong/AAA/2018_02_cancer/CancerEffectSize/code/d_summary_figure")
library(data.table)
library(ggrepel)
library(dplyr)
library(gridExtra)
library(grid)
tr = fread("../../data_samplesize/cancer_sample_size.csv")
inx1 = c(23,15,43,19,39)
inx2 = c(42,16,26,13,14,27)
inx3 = c(20,40,4)
inx = c(inx1,inx2,inx3)
M = 1070777
traitlist = unlist(tr[inx,1])
traitlistplot = unlist(tr[inx,7])
mixpdf <- function(x,est){
if(length(est)==5){
pic = est[1]
p0 = est[2]
s1 = sqrt(est[3])
s2 = sqrt(est[4])
den <- function(x){return((p0 * dnorm(x/s1)/s1 + (1-p0)*dnorm(x/s2) /s2))}
}
if(length(est)==3){
pic = est[1]
s1 = sqrt(est[2])
den <- function(x){return(dnorm(x/s1)/s1)}
}
return(den(x))
}
inx2com = c(2,4)
x_seq0 = seq(-0.05,0.05,length.out = 1000);
#-------------------------------#-------------------------------#-------------------------------
result = NULL
for(iter in 1:length(inx)){
trait_name = traitlist[iter]; trait_name_plot = traitlistplot[iter]
output_path = paste0("../../genesis_result_new/",trait_name)
if(iter %in% inx2com){
if(!file.exists(paste0(output_path,"/bestfit2_RemoveOutlier.RData"))){
load(paste0(output_path,"/bestfit2.RData"))
print(c(trait_name,"no"))
herit_OutlierIndep = 0;
n_OutlierIndep = 0;
}
if(file.exists(paste0(output_path,"/bestfit2_RemoveOutlier.RData"))){
load(paste0(output_path,"/bestfit2_RemoveOutlier.RData"))
load(paste0("../../data_new/",trait_name,"/herit_OutlierIndep.RData"))
}
est = fit$estimates$`Parameter (pic, sigmasq, a) estimates`
}
if(!iter %in% inx2com){
if(!file.exists(paste0(output_path,"/fit3_RemoveOutlier.RData"))){
load(paste0(output_path,"/fit3.RData"))
print(c(trait_name,"no"))
herit_OutlierIndep = 0;
n_OutlierIndep = 0;
}
if(file.exists(paste0(output_path,"/fit3_RemoveOutlier.RData"))){
load(paste0(output_path,"/fit3_RemoveOutlier.RData"))
load(paste0("../../data_new/",trait_name,"/herit_OutlierIndep.RData"))
}
est = fit$estimates$`Parameter (pic, p1, sigmasq1, sigmasq2, a) estimates`;
}
y_seq = apply(matrix(x_seq0,ncol=1),1,function(t) mixpdf(t,est))
tem = data.frame(cbind(trait_name_plot, y_seq))
result = rbind(result, tem)
}
result$y_seq = as.numeric(as.character(result$y_seq))
x_seq = exp(x_seq0)
df1 = result[1:(length(inx1)*1000),]
df2 = result[(length(inx1)*1000+1): ((length(c(inx1,inx2))*1000)),]
df3 = result[(length(c(inx1,inx2))*1000+1): nrow(result),]
df1 = cbind(df1, rep(x_seq,length(inx1))); colnames(df1) = c("Cancer","y","x")
df2 = cbind(df2, rep(x_seq,length(inx2))); colnames(df2) = c("Cancer","y","x")
df3 = cbind(df3, rep(x_seq,length(inx3))); colnames(df3) = c("Cancer","y","x")
p1 = ggplot(data=df1) +
scale_color_brewer(palette="Set2") +
geom_line(size=3,aes(x=x,y=y,color=Cancer,group=Cancer)) +
theme_bw() + labs(x="Odds ratio",y="Probability density") +
# scale_y_continuous(limits=c(0,55)) +
ggtitle("Cancer sites with <10,000 cases")+
theme(text = element_text(size=35),
axis.text = element_text(size=35),
legend.position=c(0.22,0.85),legend.text=element_text(size=28),
# panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
plot.title=element_text(size=35,face="italic",hjust=0.5),
legend.key.size = unit(1.2, "cm"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))+
theme(legend.title=element_blank())
p2 = ggplot(data=df2) +
scale_color_brewer(palette="Paired") +
geom_line(size=3,aes(x=x,y=y,color=Cancer,group=Cancer)) +
theme_bw() + labs(x="Odds ratio",y="Probability density") +
# scale_y_continuous(limits=c(0,55)) +
ggtitle("Cancer sites with 10,000-25,000 cases")+
theme(text = element_text(size=35),
axis.text = element_text(size=35),
# panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position=c(0.22,0.82),legend.text=element_text(size=28),
plot.title=element_text(size=35,face="italic",hjust=0.5),
legend.key.size = unit(1.2, "cm"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))+
theme(legend.title=element_blank())
p3 = ggplot(data=df3) +
scale_color_brewer(palette="Set2") +
geom_line(size=3,aes(x=x,y=y,color=Cancer,group=Cancer)) +
theme_bw() + labs(x="Odds ratio",y="Probability density") +
# scale_y_continuous(limits=c(0,55)) +
ggtitle("Cancer sites with >25,000 cases")+
theme(text = element_text(size=35),
# panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text = element_text(size=35),
plot.title=element_text(size=35,face="italic",hjust=0.5),
legend.position=c(0.22,0.82),legend.text=element_text(size=28),
legend.key.size = unit(1.2, "cm"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))+
theme(legend.title=element_blank())
pp = list(length=nrow(tr))
pp[[1]] = p1; pp[[2]] = p2; pp[[3]] = p3;
pdf(paste0("../../result_png_csv_new_clump//Fig1.pdf"), width=36, height=12)
do.call(grid.arrange,c(pp,ncol=3,as.table=T))
dev.off()
source('~/OneDrive - The University Of Hong Kong/AAA/2018_02_cancer/CancerEffectSize/code/d_summary_figure/Fig1.R', echo=TRUE)
load("../../data_new/Ly")
#-------------------------------------------------------------------
# Update Date: 02/01/2020
# Create Date: 05/09/2019
# Author: Yan (Dora) Zhang
#-------------------------------------------------------------------
rm(list=ls())
# setwd("~/Dropbox/2018_02_cancer/code_new/results_summary_clump//")
setwd("~/OneDrive - The University Of Hong Kong/AAA/2018_02_cancer/CancerEffectSize/code/d_summary_figure")
library(data.table)
library(foreach)
library(ggplot2)
M = 1070777
source("function_polyriskpredict.R")
source("function_pheno_add.R")
tr0 = fread("../../data_samplesize//cancer_sample_size.csv")
inx1 = c(23,15,43,19,39)
inx2 = c(42,16,26,13,14,27)
inx3 = c(20,40,4)
inx = c(inx1,inx2,inx3)
tr = tr0[inx,]
tr$group = c(rep(1,5),rep(2,6),rep(3,3))
tr$trait_color =c(rep("black",length(inx)))
ff = function(x,y){x*y/(x+y)}
output = matrix(0,nrow(tr)*4, 7)
temp <- commandArgs(TRUE)
i <- as.numeric(temp[1])
for(i in 1:14){
if(i%in%c(1,2)) {y_auclimit0 = 0.5; y_auclimit = 0.9; y_rrlimit0 = 0;  y_rrlimit=13}
if(i==3) {y_auclimit0 = 0.5; y_auclimit = 0.9; y_rrlimit0 = 0; y_rrlimit = 13}
if(!i%in%c(1,2,3)) {y_auclimit0 = 0.5; y_auclimit = 0.9; y_rrlimit0 = 0; y_rrlimit = 13}
trait_name = tr[i,1]
trait_name_plot = tr[i,7]
trait_color = as.character(tr[i,"trait_color"])
ew/results_summary_clump//")
setwd("~/OneDrive - The University Of Hong Kong/AAA/2018_02_cancer/CancerEffectSize/code/d_summary_figure/")
rm(list=ls())
library(data.table)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(gridExtra)
library(grid)
library(doParallel)
library(foreach)
tr0 = fread("../../data_samplesize//cancer_sample_size.csv")
inx1 = c(23,15,43,19,39)
inx2 = c(42,16,26,13,14,27)
inx3 = c(20,40,4)
inx = c(inx1,inx2,inx3)
tr = tr0[inx,]
lp = list(length=nrow(tr))
lauc = list(length=nrow(tr))
lpheno = list(length=nrow(tr))
lr99 = list(length=nrow(tr))
for(i in 1:14){
trait_name = tr[i,1]
trait_name_plot = tr[i,7]
load(paste0("../../result_png_csv_new_clump/","F4_polyrisk_optim2020",trait_name,".RData"))
lp[[i]] = p_p
lauc[[i]] = p_auc
lpheno[[i]] = p_pheno
lr99[[i]] = p_r99
}
grid.arrange(
arrangeGrob(grobs=lapply(lauc, function(p) p ), ncol=4,
bottom=textGrob("x: Total sample size assuming 1:1 case:control ratio (in thousands)", vjust=-2,gp=gpar(fontsize=25)),
left=textGrob("y: AUC associated with the PRS", just=c(0.5,1.5), gp=gpar(fontsize=25), rot=90)))
#---------------
pdf(paste0("../../result_png_csv_new_clump//Fig3.pdf"), width=20, height=20)
# do.call(grid.arrange,c(lauc,ncol=4,as.table=T))
grid.arrange(
arrangeGrob(grobs=lapply(lauc, function(p) p ), ncol=4,
bottom=textGrob("x: Total sample size assuming 1:1 case:control ratio (in thousands)", vjust=-2,gp=gpar(fontsize=25)),
left=textGrob("y: AUC associated with the PRS", just=c(0.5,1.5), gp=gpar(fontsize=25), rot=90)))
dev.off()
#-------------------------------------------------------------------
# Update Date: 01/28/2020
# Create Date: 05/09/2019
# Author: Yan (Dora) Zhang
#-------------------------------------------------------------------
# setwd("~/Dropbox/2018_02_cancer/code_new/results_summary_clump//")
setwd("~/OneDrive - The University Of Hong Kong/AAA/2018_02_cancer/CancerEffectSize/code/d_summary_figure/")
rm(list=ls())
library(data.table)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(gridExtra)
library(grid)
library(doParallel)
library(foreach)
tr0 = fread("../../data_samplesize//cancer_sample_size.csv")
inx1 = c(23,15,43,19,39)
inx2 = c(42,16,26,13,14,27)
inx3 = c(20,40,4)
inx = c(inx1,inx2,inx3)
tr = tr0[inx,]
lp = list(length=nrow(tr))
lauc = list(length=nrow(tr))
lpheno = list(length=nrow(tr))
lr99 = list(length=nrow(tr))
for(i in 1:14){
trait_name = tr[i,1]
trait_name_plot = tr[i,7]
load(paste0("../../result_png_csv_new_clump/","F4_polyrisk_optim2020",trait_name,".RData"))
lp[[i]] = p_p
lauc[[i]] = p_auc
lpheno[[i]] = p_pheno
lr99[[i]] = p_r99
}
p_p
p_auc
trait_name = tr[i,1]
trait_name_plot = tr[i,7]
load(paste0("../../result_png_csv_new_clump/","F4_polyrisk_optim2020_log1",trait_name,".RData"))
lp[[i]] = p_p
lauc[[i]] = p_auc
lpheno[[i]] = p_pheno
lr99[[i]] = p_r99
p_p
p_auc
load("/Users/dorazhang/OneDrive - The University Of Hong Kong/AAA/2018_02_cancer/CancerEffectSize/result_png_csv_new_clump/F4_polyrisk_impTECAC.RData")
p_p
p_auc
p_r99
dev.off()
p_p
p_auc
